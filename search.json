[{"path":"/2023/02/24/post22046113/","content":"##  PHP基本语法\n\n```  <?php\n<?php\n         //php代码\n?>\n```\n\n* **每条语句后跟分号**\n\n* 在php文件中，可包含多串php代码以及html标签\n\n****\n\n### 声明变量\n\n* 使用`$` 声明一个PHP变量,且使用变量时始终要带上$\n* PHP的变量没有类型，创建变量时不需声明类型，但是**数据是有类型的**\n* 变量命名规则同C，只能有数字、下划线、字母，且数字不能作为开头\n* 在php中允许中文变量名（不建议）\n\n****\n\n### 注释\n\nphp有行注释与块注释。\n\n* 行注释：用`//` 或者 `#` 可以注释一行\n* 块注释：`/*  注释内容   */`   \n\n****\n\n## 变量的作用域\n\nPHP总共三种作用域\n\n1. 全局变量：在函数外部定义的变量，只允许在全局空间使用，理论上函数内部不能访问，BUT还是可以访问的   \n\n   * 函数内引用全局变量需要用到关键字  `global` ,在函数里重新声明一次（同一个变量）；若外部不存在该变量名，则系统会在全局空间再申请内存，定义一个与局部变量同名的全局变量\n\n   * 或者使用  `$GLOBALS['变量名'] `  引用全局变量 ,实际上PHP 将所有全局变量存储在一个名为 $GLOBALS[*index*] 的数组中。 （使用$GLOBALS['变量名']，变量名不需加$）\n\n2. 局部变量：在函数内部定义的变量，只允许在函数内部使用\n\n3. 超全局变量：系统定义的变量，没有访问限制\n\n   tips：php中也有`static`关键字，用于声明静态量\n\n关键字global的使用格式\n\n```php\nglobal 变量名; //要带$，不能赋值\n变量名= 值    //修改\n```\n\n\n\n****\n\n## php中的基本函数/关键字\n\n### 输出函数\n\nphp有多种输出方式，主要有 `echo`  和 `print` \n\necho 和 print 区别:\n\n- echo - 可以输出一个或多个字符串     例如:\n\n  ```php\n  echo \"这是\" ,\"一个\" , \"字符串\"   ;  //注意逗号隔开\n  ```\n\n- print - 只允许输出一个字符串，返回值总为 1\n\n- print_r - 类似var_dump函数，但更简单，只输出值，不输出类型(数组常用)\n\n**Tips：**   \n\n1. echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。\n\n   2. 字符串中可以包含html标签\n\n      *****\n\n### 定义常量函数\n\nphp用 ` define`函数 声明常量，格式如下\n\n``` php\ndefine ('常量名'，常量值)；\n```\n\n或者用`const` 关键字声明常量，格式如下\n\n```php\nconst 常量名 =常量值；\n```\n\n常量命名规则：\n\n1. 不使用`$` 符号，否则系统会认为是变量\n\n2. 常量可以使用特殊符号做名称，但只能用define定义 //访问特殊名常量要用到 constant('常量名') 函数\n\n3. 其他同变量命名规则 \n\n****\n\n###  var_dump() 函数\n\n**var_dump()** 函数用于输出变量的相关信息。格式如下\n\n```PHP\nvar_dump(变量名)\n```\n\n其返回值是变量的数据类型和值；\n\n### 类型判断函数\n\n有多种函数可以判断数据的类型\n\n1.类型判断函数是一组函数，格式为   `is_XXX(变量类型)`，用于判断变量储存值的类型\n\n返回值为布尔值ture或false\n\n2.`gettype(变量名)`：获取类型，返回值的是该类型名对应的字符串\n\n`settype(变量名，'类型名')`：设定数据类型，与强制转化不同（强制转换不改变数据本身，只对数据复制内容进行处理）返回值是布尔类型\n\n### 有关时间的函数\n\n1.**date()**:<http://blog.itpub.net/31552074/viewspace-2220008/>\n\n2.**time()**:无参数，返回自Unix纪元（格林威治时间1970.1.1.00：00：00）至今的秒数\n\n### 有关数学的函数\n\n**max()**：返回参数中的最大值，参数可以是多个数字或数组\n\n**min()**：返回参数中的最小值，参数可以是多个数字或数组\n\n**mt_rand**与rand：得到一个指定区间的随机整数，前者效率更高\n\n**round()**：为浮点数四舍五入，可指定保留位数，默认0\n\n**ceil()**:向上取整\n\n**floor()**:向下取整\n\n**pow()**:指数函数\n\n**abs()**：绝对值\n\n**sqrt()**：求平方根\n\n### 有关函数的函数\n\n**function_exists('函数名')**:检测函数是否在内存中存在\n\n**func_get_arg()**:在自定义函数中获取指定数值对应的参数(第几个参数，从0开始  )\n\n**func_get_args()**:在自定义函数中获取所有的参数(实参)，得到数组 \n\n**func_num_args()**:获取自定义函数中参数(实参)的数量\n\n### 字符串相关函数\n\n**strlen()**:返回字符串长度\n\n一个汉字在utf-8字符集下占3字节，中文标点也是 \n\n**implode(‘连接方式’，数组)**:将数组中的元素按照某些规则连接成字符串\n\n**explode（分割字符，目标字符串）**：将字符串按照某种格式进行分割，返回数组\n\n**str_spilt(字符串，长度)**：按指定长度切割字符串得到数组\n\n**trim()**:默认去除字符串两端的空格，也可指定循环去除两端的内容，知道碰都一个不是目标字符为止 。相似的函数还有**l_trim**与**r_trim**\n\n**substr（字符串，开始位置，长度)**:从指定的开始位置（从0开始）截取指定长度字符串\n\n**strstr(字符串，匹配字符)**：从指定字符开始，截取到最后\n\n**strtolower()、strtoupper()**:全小写、全大写\n\n**ucfirst（）**：首字母大写\n\n**strpos(字符串，’字符‘)**：判断指定字符在目标字符串中首次出现的位置，可与切割字符串长度的函数配合使用\n\n**strrpos(字符串，’字符‘)**:判断指定字符在目标字符串中最后出现的位置\n\n**str_replace（’被替换内容‘，’替换内容‘，字符串）**：将指定字符串中的指定内容替换\n\n**printf/sprintf（字符串（含有转化格式），对应量）：**:格式化输出，参考C\n\n**str_repeat(字符串，n)**:重复一个字符串n次\n\n**str_shuffle()**:随机打乱字符串（中文字符串乱码）\n\n### 数组相关函数\n\n1.排序函数:都是按照ASCLL码进行比较，且对原数组进行操作\n\n**sort()**:顺序排序，返回值是布尔值；会将数组下标更新成数字，按照数组元素的值从小到大重新排序，会破坏下标和值的对应关系。\n\n**rsort()**:逆序排序，其他同sort()\n\n**asort()**:顺序排序，但不破坏下标和值的对应关系\n\n**ksort()**：按下标顺序排序\n\n**krsort()**:按下标逆序排序\n\n**shuffle()**:随机打乱数组元素，更新数组下标\n\n2.指针函数\n\n**reset()**： 将数组内部指针倒回第一个元素并返回第一个数组单元的值，数组为空返回FALSE\n\n**end()**:将指针移到数组最后一个元素并返回值\n\n**next()**:将数组内部指针下移一位，返回值，若为空则返回FALSE\n\n**prev()**:将指针上移一位，返回值\n\n**current()**:获取当前指针对应的元素值\n\n**key()**:获取当前指针对应的下标值\n\n注意：next()与prev()会移动指针，可能会导致指针离开数组，且不能再次通过这两个函数移动指针回来，但可以使用end()或reset()函数重置指针\n\n3.其他函数\n\n**count()**:统计数组中的元素的数量\n\n**array_push(数组名,元素1,[更多元素])**:  在数组末尾开始增加数组元素，返回增加后数组元素的数量\n\n**array_pop(数组名)**:取出数组最末尾元素，返回该元素的值，并重置数组指针\n\n**array_shift()**:将数组首元素移出数组，返回该元素的值，所有数字下标修改成从0开始，字符串下标不变，并重置指针\n\n**array_unshift(数组名，元素1，[更多元素]) **:从数组头部开始增加数组元素，返回增加后的数组元素数量，所有数字下标修改成从0开始，字符串下标不变，并重置指针\n\n**array_reverse(数组名，[bool])**:返回一个单元顺序相反的新数组，不改变原数组，bool为false会重置数字下标（默认），为ture则不会\n\n**in_array(值，数组)**：判断一个元素在数组中是否存在，返回布尔值\n\n**array_keys(数组名，[值])**:以数组形式返回数组的部分或所有值所有键名，指定值后只返回该值的键名\n\n****\n\n## 魔术常量\n\n魔术常量是系统常量，命名格式为 `__常量名__`  ,其值随环境变化而变化\n\n|    魔术 常量    | 返回值                 |\n| :-------------: | ---------------------- |\n|    `__DIR__`    | 文件的绝对路径         |\n|   `__FILE__`    | 文件的绝对路径和文件名 |\n|   `__LINE__`    | 当前行号               |\n| `__NAMESPACE__` | 当前命名空间的名称     |\n|   `__CLASS__`   | 当前所属的类           |\n|  `__METHOD__`   | 当前所属的方法         |\n| `__FUNCTION__`  | 当前所属函数           |\n\n## php的数据类型 \n\n###  一、 基本数据类型：\n\n1.整型  `int `   :64位计算机中8字节，32位计算机中4字节 \n\n2.浮点型 ` float` 与  `double`（在php中是一个概念） ：8字节，储存小数或整型存不下的整数\n\n3.字符串型 `string` :系统根据实际分配内存\n\n4.布尔类型`bool`：只有ture 和false（1和0）两个值\n\n###  二、复合数据类型\n\n1.对象类型`object`\n\n2.数组类型`array`\n\n### 三、特殊数据类型\n\n1.资源类型`resource` :存放资源数据，通常是php外部数据\n\n2.空类型`NULL`：不能运算\n\n### 四、伪类型\n\n实际上php不存在的类型，方便程序员查看操作手册而存在\n\n1.混合型`mixed` ：可以是多种php数据类型\n\n2.数值型`number`： 任意数值类型（整型和浮点型）\n\n****\n\n##  字符串详解\n\n### 定义字符串\n\n字符串用 单引号` ' '` 或双引号` \" \"` 包裹，两者只有在转义与变量识别上有细微差别\n\n转义：单引号包裹的字符串只能识别 单引号转义` \\'`，其他转义均无法识别，双引号包裹的字符串正好相反 \n\n变量识别：双引号中可解析变量，单引号不行。因此 为保证变量独立性，一般为变量加上一组大括号（变量专业标识符）\n\n### heredoc、nowdoc字符串\n\n一种定义字符串的方法；\n\n格式如下：\n\n```php\n$a=<<<EOF\n    'asd'$b\n    '\"123\"\n    \n    //字符串内容\nEOF;\n//结束需要独立一行且前后不能空格\n```\n\n1.  以 **<<<EOF** 开始标记开始，以 **EOF** 结束标记结束，中间**所有内容**都是字符串本身。结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号 。\n\n2.  开始标记和结束标记相同，比如常用大写的 **EOT、EOD、EOF** 来表示，但是不只限于那几个(也可以用：JSON、HTML等)，只要保证开始标记和结束标记不在正文中出现即可。\n\n3.  位于开始标记和结束标记之间的变量可以被正常解析，但是函数则不可以。在 heredoc 中，变量不需要用连接符 **.** 或 **,** 来拼接。\n\n  heredoc是没有双引号的双引号字符串   nowdoc是没有单引号的单引号字符串\n\n## 数据类型转换\n\nphp有两种比较：\n\n- 松散比较：使用两个等号 **==** 比较，只比较值，不比较类型。\n- 严格比较：用三个等号 **===** 比较，除了比较值，也比较类型。\n\n两种转换方式：\n\n1.自动转换：系统根据需求判定，自行转换\n\n2.强制转换：人为操作，格式如下\n\n```php\n(强制转换的类型名)  变量名\n```\n\n判断语句常转换成布尔类型，算数运算转换成数值类型\n\n字符串类型转数值类型注意：\n\n字母开头的字符串的值为零；  数字开头的字符串取字母前的数字（不会包括两个小数点）\n\n*****\n\n## 流程替代语法\n\nPHP提供了一种替代语法，用以替代分支结构和循环结构代码中的大括号。全部都是一种格式：\n\n左大括号`{  ` 使用`：` 替代 ；右大括号`}`使用 **end+关键字**替代。例如\n\n```php\nif():     endif;    <===>if(){}\nswitch(): endswitch;   <===>switch(){}\nfor() :   endfor;  <===>  for(){}\n```\n\n*****\n\n## 文件包含\n\n在一个php脚本中引用其他（php）文件\n\n引用方法有四种：**include**；include_once ; **require** ; require_once。例如：\n\n```php\ninclude '文件路径'；\n```\n\n向上包含：先包含文件，再使用文件中的内容等\n\n向下包含：先准备内容，再包含另外的文件，在另外的文件中使用当前内容\n\n#### 文件包含原理\n\n在文件加载时，系统会自动将被包含文件中的代码嵌入到当前文件，嵌入的位置就是include的地方。\n\n被包含文件是单独编译的。\n\nphp文件编译时若有语法错误则会失败（即不执行），但是如果被包含文件有错误时，系统会执行到include语句才会报错\n\n#### 不同引用方法的区别\n\ninclude：可以对一个文件多次加载，系统会执行多次\n\ninlude_once ：对一个文件多次加载   系统只会执行一次 \n\ninclude与require的区别： 本质都是包含文件，唯一区别在于报错形式不 同。include不会影响后续代码执行，require包含出错文件后续代码则不再执行。\n\n#### 文件加载路径\n\n1.**绝对路径**：\n\n* 从磁盘根目录开始（本地绝对路径）\n* 从网站根目录开始（网络绝对路径）\n\n2.**相对路径**：从当前文件所在目录开始的路径\n\n`./`  ：表示当前目录\n\n`../    ` ：表示上级目录\n\n*****\n\n## 函数\n\n函数定义和使用大致同C\n\n函数定义语法\n\n```php\nfunction 函数名 (参数1,参数2,参数3....)\n{\n    //函数体\n  return  //返回值 默认返回NULL\n}\n```\n\nphp函数调用的特点：只要能在内存中找到对应的函数就可以执行，不需先声明函数\n\n实参不能少于形参，可以多。\n\nphp中没有指针，想通过函数来改变实参值可以使用引用传递 即在形参名前加取值符`&`\n\nreturn 还可以在文件中使用，将结果提交给包含本文件的文件，且return后面的代码不再执行\n\n### 可变函数\n\n变量所保存的值正好是一个函数名时，可以使用 **变量()**  的形式来使用函数，可实现函数回调\n\n###  匿名函数\n\n即没有名字的函数，一般用变量保存,本质是得到一个对象\n\n``` PHP\n$func=function () {\n    //函数体\n};\n```\n\n### 闭包\n\n闭包是一个存在内部函数的引用关系。 该引用指向的是外部函数的局部变量对象\n\n简单理解：函数内部有一些局部变量在函数执行之后没有被释放，是因为在函数内部还有对应的函数在引用（匿名函数）。例如：\n\n```php\nfunction display (){\n    $name =__FUNCTION__; //魔术常量，返回当前函数名\n    \n    $innerfunction = function () use($name) {\n        echo $name\n    };    //定义匿名函数，use将外部变量保留给内部使用，形成闭包\n    \n    return $innerfunction ;\n}\n \n```\n\n## 数组\n\n即数据的组合\n\n### 定义方法\n\nphp支持多种定义数组的方法\n\n1.使用`array` 关键字\n\n```php\n$a=array(元素1，元素2......); //可以是各种不同类型\n```\n\n2.使用中括号包裹数据\n\n```php\n$a=[元素1，元素2......];\n```\n\n3.隐形定义数组：给变量增加一个中括号，系统自动变为数组\n\n```php\n$a[]=值1；//不提供下标默认为0，或者从当前最大的下标开始\n    $a[下标]=值; \n```\n\n### 数组特点\n\n1.下标可以不是数字，下标都是数字的是**索引数组**，都是字符串的是**关联数组**，不同下标混合存在的是**混合数组**\n\n2.数组元素的顺序以放入顺序为准，与下标无关\n\n3.数组下标具有自增长特性，从0开始自动增长，或者从当前最大的下标开始，未被赋值的元素值为NULL\n\n4.特殊下标的转换：布尔值与NULL作下标时会自动转换 \n\n5.数组元素没有类型限制，也没有长度限制\n\n### foreach遍历\n\n基本语法如下\n\n```php\nforeach($数组变量 as [$下标=>]) {\n    //通过$下标访问元素的下标，通过$值访问元素的值\n}\n```\n\n遍历原理：\n\n1.foreach重置数组内部指针，让指针指向第一个元素\n\n2.进入foreach循环：通过指针取得当前第一个元素，然后将下标取出放到对应的下标变量$k中（如果存在），再将值取出放到值变量$v中；最后指针下移\n\n3.进入到循环体，开始执行\n\n4，重复2和3，直到指针取不到内容\n\n### for遍历\n\n当数组下标是规律的数字时可以使用for循环遍历数组.例如：\n\n```php\n<?php\n    $arr=array(1,23,15,45,4,8,4,84,)\n    for ($i=0,$len=count($arr);$i<len;$i++)\n    {\n        echo 'key is: ',$i,'and value is: ',$arrp[$i],'<br/>';\n    }\n    ?>\n```"},{"title":"22046111","path":"/2022/12/19/22046111/","content":"# PHP基础\n\n## 变量\n\n### 普通变量\n\n##### 变量命名规则\n\n1、变量名字必须以\"$\"开头；\n\n2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头\n\n3、允许中文变量；\n\n```php\n$a=234;\n$b='原身'；\n$c='qwe';\necho a;//输出变量\nunset($a);//删除变量\n```\n\n### 预定义变量\n\n即提前定义的变量，由系统定义的变量，存储许多要用到的数据（预定义变量都是数组）。\n\n```php\n//例如\n$_GET//\n$_POST//\n`\n`\n`\n```\n\n### 可变变量\n\n如果一个变量保存的值刚好是另外一个变量的名字，则可直接通过访问一个变量得到另外一个变量的值：但需在变量前多\n\n加一个$符号\n\n```php\n$a = 'b';    // a变量的内容正好是b变量的名称，故称a为可变变量\n$b = 'bb';\necho $$a;    // 使用时需加一个$符号,输出bb\n```\n\n### 变量传值\n\n将一个变量赋值给另一个变量：值传递、引用传递\n\n值传递：将变量保存的值复制一份，并将该值给另外一个变量保存(两个变量无关系)\n\n引用传递：将变量保存值所在的内存地址传递给另外一个变量，==两个变量指向同一个内存==（名字不一样而已）。\n\n```php\n$a=12;\n$b=$a;//值传递\n$b=&$a;//引用传递，b和a都指向同一个存放了12的地址。\n```\n\n## 常量\n\n### 普通常量\n\n```php\ndefine('PI',3.1415);   // 注意此处与c++不同，#define 为预处理命令，宏定义，无需加；。。\n// 使用const关键字定义\nconst PI1 = 3;\n```\n\ndefine方式可以命名特殊常量，比如中文常量，但访问常量是要用==constant函数==，例如\n\n```php\ndefine('元神'，'yuanshen');\necho constant('元神');\n```\n\n### 系统常量\n\n```php\necho PHP_VERSION//输出php版本\necho PHP_INT_SIZE//输出int字节数\necho PHP_INT_MAX//输出int可表示最大数\n```\n\n### 魔术常量\n\n由双下划线+常量名+双下划线组成，==其值会随着环境变化而变化，用户无法改变==。\n\n```php\necho __DIR__;//输出当前php代码所处文件夹位置\necho __FILE__;//输出当前php代码文件所位置\necho __LINE__;//输出php当前代码行数\n```\n\n## 数据类型\n\n### 简单数据类型\n\n|                     类型                      | 字节 |\n| :-------------------------------------------: | :--: |\n| bool/boolean(布尔类型，只有true和false两个值) |  /   |\n|                 float/double                  |  8   |\n|                      int                      |  4   |\n|               string (字符串型)               |  /   |\n\n### 复合数据类型\n\n|      类型       |      |\n| :-------------: | ---- |\n| 对象类型 object |      |\n| 数组类型 array  |      |\n\n### 特殊数据类型\n\n|       类型        |      |\n| :---------------: | ---- |\n| 资源类型 resource |      |\n|    空类型 NULL    |      |\n\n## 数据类型的转换\n\n1、自动转化：系统根据自己的需求判断，自己转化（用的较多、但效率较低）。\n\n2、强制转换（手动）：在变量之前增加一个()，并在括号里面写上对于的类型，其中NULL特殊，需用unset。\n\n规则：\n\n1. 布尔类型true为1，false为0；\n\n2. 字符串数字开头取数字到第一个字母；以字母开头一律为0；\n\n   ==注意==：==php 转换时只读到第二个小数点前==\n\n## 数据判断\n\nis_xxx(变量名)\n\n如果变量是xxx类型，返回true不是为false；但是bool类型不能用echo查看，要用var_dump(变量1，变量2，···)；\n\n```php\n$a='yuanshen';\nvar_dump(is_int($a));\n//输出bool(false)\n```\n\n### 有关数据类型的函数\n\ngettype($a);\n\nsetttype($a,'xxx');\n\n\n\n```php\n$a='yuanshen';\nsettype($a,'int');//将a的类型转换为Integer\necho gettype($a);//输出a的类型\n```\n\nempty(),判断是否为空，不是NULL，返回bool；\n\nisset(),判断是否存在，返回bool;\n\n```php\n$a=10,$b;\nvar_dump(isset($c));\nvar_dump(empty($b));\n```\n\n\n\n## 进制转换\n\n```php\n\t$a=110//十进制\n\t$a=0b110//二进制\n    $a=0110//八进制\n    $a=0x110//十六进制\n// php中提供了很多函数进行转换：\n// Decbin():十进制转二进制\nvar_dump(decbin(107));     // 结果：string(7) \"1101011\"\n// 同理，还有Decoct():十进制转八进制\n// Dechex():十进制转十六进制\n// Bindec():二进制转十进制\n```","tags":["22046111"]},{"title":"22046209","path":"/2022/12/18/22046209/","content":"22046209","tags":["22046209"]},{"title":"测试样式","path":"/2022/12/18/测试样式/","content":"测试\n<!--more-->\n\n## 主要内容\n\n> #### Markdown*是什么*？\n>\n> #### *谁*创造了它？\n>\n> #### *为什么*要使用它？\n>\n> #### *怎么*使用？\n>\n> #### *谁*在用？\n>\n> #### 尝试一下\n\n## 正文\n\n### 1. Markdown*是什么*？\n\n**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    \n**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    \n\n### 2. *谁*创造了它？\n\n它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    \n\n他有着足以让你跪拜的人生经历：    \n\n+ **14岁**参与RSS 1.0规格标准的制订。     \n+ **2004**年入读**斯坦福**，之后退学。   \n+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   \n+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   \n+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     \n+ **2013**年1月自杀身亡。    \n\n![Aaron Swartz](测试样式/Aaron_Swartz.jpg)\n\n天才都有早逝的归途。\n\n### 3. *为什么*要使用它？\n\n+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。\n+ 兼容HTML，可以转换为HTML格式发布。\n+ 跨平台使用。\n+ 越来越多的网站支持Markdown。\n+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）\n+ 摆脱Word（我不是认真的）。\n\n### 4. *怎么*使用？\n\n如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。\n\nMarkdown语法主要分为如下几大部分：\n**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\\`**，**符号'`'**。\n\n#### 4.1 标题\n\n两种形式：  \n1）使用`=`和`-`标记一级和二级标题。\n\n> 一级标题   \n> `=========`   \n> 二级标题    \n> `---------`\n\n效果：\n\n> 一级标题   \n> =========   \n>\n> 二级标题\n> ---------  \n\n2）使用`#`，可表示1-6级标题。\n\n> \\# 一级标题   \n> \\## 二级标题   \n> \\### 三级标题   \n> \\#### 四级标题   \n> \\##### 五级标题   \n> \\###### 六级标题    \n\n效果：\n\n> # 一级标题   \n>\n> ## 二级标题   \n>\n> ### 三级标题   \n>\n> #### 四级标题   \n>\n> ##### 五级标题   \n>\n> ###### 六级标题\n\n#### 4.2 段落\n\n段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。\n\n#### 4.3 区块引用\n\n在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：\n\n> \\> 区块引用  \n> \\>> 嵌套引用  \n\n效果：\n\n> 区块引用  \n>\n> > 嵌套引用\n\n#### 4.4 代码区块\n\n代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    \n普通段落：\n\nvoid main()    \n{    \n    printf(\"Hello, Markdown.\");    \n}    \n\n代码区块：\n\n```c\nvoid main()\n{\n    printf(\"Hello, Markdown.\");\n}\n```\n\n**注意**:需要和普通段落之间存在空行。\n\n#### 4.5 强调\n\n在强调内容两侧分别加上`*`或者`_`，如：\n\n> \\*斜体\\*，\\_斜体\\_    \n> \\*\\*粗体\\*\\*，\\_\\_粗体\\_\\_\n\n效果：\n\n> *斜体*，_斜体_    \n> **粗体**，__粗体__\n\n#### 4.6 列表\n\n使用`·`、`+`、或`-`标记无序列表，如：\n\n> \\-（+\\*） 第一项\n> \\-（+\\*） 第二项\n> \\- （+\\*）第三项\n\n**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n\n效果：\n\n> + 第一项\n> + 第二项\n> + 第三项\n\n有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：\n\n> 1 . 第一项   \n> 2 . 第二项    \n> 3 . 第三项    \n\n效果：\n\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n#### 4.7 分割线\n\n分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。\n\n#### 4.8 链接\n\n链接可以由两种形式生成：**行内式**和**参考式**。    \n**行内式**：\n\n> \\[younghz的Markdown库\\]\\(https:://github.com/younghz/Markdown \"Markdown\"\\)。\n\n效果：\n\n> [younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")。\n\n**参考式**：\n\n> \\[younghz的Markdown库1\\]\\[1\\]    \n> \\[younghz的Markdown库2\\]\\[2\\]    \n> \\[1\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n> \\[2\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n\n效果：\n\n> [younghz的Markdown库1][1]    \n> [younghz的Markdown库2][2]\n\n[1]: https:://github.com/younghz/Markdown \"Markdown\"\n[2]: https:://github.com/younghz/Markdown \"Markdown\"\n\n**注意**：上述的`[1]:https:://github.com/younghz/Markdown \"Markdown\"`不出现在区块中。\n\n#### 4.9 图片\n\n添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。\n\n#### 4.10 反斜杠`\\`\n\n相当于**反转义**作用。使符号成为普通符号。\n\n#### 4.11 符号'`'\n\n起到标记作用。如：\n\n>\\`ctrl+a\\`\n\n效果：\n\n>`ctrl+a`    \n\n#### 5. *谁*在用？\n\nMarkdown的使用者：\n\n+ GitHub\n+ 简书\n+ Stack Overflow\n+ Apollo\n+ Moodle\n+ Reddit\n+ 等等\n\n#### 6. 尝试一下\n\n+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。\n+ **在线**的dillinger.io评价也不错   \n+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    \n+ **Mac**下的Mou是国人贡献的，口碑很好。\n+ **Linux**下的ReText不错。    \n\n**当然，最终境界永远都是笔下是语法，心中格式化 :)。**\n\n****\n\n**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。\n\n****\n\n以上基本是所有traditonal markdown的语法。\n\n### 其它：\n\n列表的使用(非traditonal markdown)：\n\n用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。\n\n|    代码库    | 链接                                                         |\n| :----------: | ------------------------------------------------------------ |\n|   MarkDown   | [https://github.com/younghz/Markdown](https://github.com/younghz/Markdown \"Markdown\") |\n| MarkDownCopy | [https://github.com/younghz/Markdown](https://github.com/younghz/Markdown \"Markdown\") |\n\n关于其它扩展语法可参见具体工具的使用说明。\n转载于https://github.com/younghz/Markdown/blob/master/README.md","tags":["test"]}]